version: '3.8'

services:
  code_exec:
    platform: linux/amd64
    build:
      context: ./code_exec
    image: soul4927/s-talk_code_exec:latest # 빌드 이미지 이름 , pull할때도 사용
    ports:
      - '8081:8081'
    networks:
      - mynet
    env_file:
      - ./code_exec/.env

  # fetch:
  #   build:
  #     context: ./fetch
  #   ports:
  #     - '8001:8001'
  #   volumes:
  #     - ./fetch:/app
  #   networks:
  #     - mynet

  llm:
    platform: linux/amd64
    build:
      context: ./llm
    image: soul4927/s-talk_llm:latest
    ports:
      - '8080:8080'
    networks:
      - mynet
    environment:
      - EXECUTOR_URL=http://code_exec:8081/execute # 도커 환경에서의 URL
    env_file:
      - ./llm/.env

  portainer:
    # Portainer 컨테이너에 사용할 이미지 (portainer-ce의 최신 버전)
    image: portainer/portainer-ce:latest
    container_name: portainer # 컨테이너의 이름을 지정
    # 컨테이너가 호스트 시스템의 모든 권한을 얻을 수 있도록 허용 (주의: 보안상의 이유로 사용에 주의가 필요)
    privileged: true
    ports:
      - '55555:9000' #port 설정 외부:55555(본인이설정), 내부:9000(portainer port)
    volumes:
      - './portainer:/data' # 호스트의 ./portainer 디렉토리를 컨테이너 내부의 /data 디렉토리에 마운트 (Portainer 데이터를 저장하기 위해)
      - '/var/run/docker.sock:/var/run/docker.sock' # 호스트의 Docker 소켓을 컨테이너 내부의 Docker 소켓에 마운트 (Docker API에 접근하기 위해)
    restart: always # 컨테이너가 종료될 때 항상 재시작

volumes:
  portainer_data:

networks:
  mynet:
    driver: bridge
